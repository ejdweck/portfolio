{"version":3,"sources":["img/headshot.jpeg","img/melons.gif","img/todo-concept-v1.svg","img/name-underline.svg","components/ProjectRow.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","StyledRow","styled","span","StyledColumn","StyledParagraph","p","StyledImage","img","StyledProjectTitle","ProjectRow","paragraphs","this","props","_","map","paragraph","projectTitle","src","renderParagraphs","Component","StyledHeadshot","StyledAppContainer","div","StyledContainer","StyledName","StyledLandingTitle","StyledTitle","StyledMoreInfo","StyledTextBlueUnderline","StyledTextPinkUnderline","App","Fragment","right","melons","todov1","evan","cursor","show","style","color","Delay","ms","renderContent","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9151380e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/headshot.1f685bc0.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/melons.d57a4ef0.gif\";","module.exports = __webpack_public_path__ + \"static/media/todo-concept-v1.ed4988c8.svg\";","module.exports = __webpack_public_path__ + \"static/media/name-underline.1a4ba160.svg\";","import React, { Component } from 'react'\nimport _ from 'lodash'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'; // ES6\n\n//TODO uninstall\n//import * as FontAwesome from 'react-icons/lib/fa'\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n//import { faCoffee } from '@fortawesome/free-solid-svg-icons'\n\n\n// import { SocialIcon } from 'react-social-icons';\n\nconst StyledRow = styled.span`\n  display: flex;\n  flex-direction: row;\n  margin-left: 35px;\n  margin-right: 35px;\n\tmargin-top: 40px;\n\theight: 100vh;\n\n  @media screen and (max-width: 1000px) {\n    display: block;\n    margin-left: 20px;\n    margin-right : 20px;\n  }\n`\n\nconst StyledColumn = styled.span`\n  display: flex;\n  flex-direction: column;\n  // flex: 1;\n`\n\nconst StyledParagraph = styled.p`\n  font-size: 30px;\n  margin-right: 35px;\n  @media screen and (max-width: 1000px) {\n    text-align: left;\n    font-size: 20px;\n    margin-right: 0px;\n  }\n`\n\nconst StyledImage = styled.img`\n  height: auto; \n  width: auto; \n  max-width: 800px; \n  max-height: 600px;\n\n  @media screen and (max-width: 1000px) {\n    max-width: 300px; \n    max-height: 200px;\n    display: block;\n    margin: 0 auto;\n  }\n`\n\nconst StyledProjectTitle = styled.span`\n  font-size: 40px;\n  margin-left: 0px;\n\n  @media screen and (max-width: 1000px) {\n    margin-left: 0px;\n    margin-right: 0px;\n    font-size: 20px;\n    text-align: left;\n  }\n`\n\nclass ProjectRow extends Component {\n\trenderParagraphs() {\n\t\tconst { paragraphs } = this.props\n\t\treturn _.map(paragraphs, (paragraph) => <StyledParagraph>{paragraph}</StyledParagraph>)\n\t}\n\n\trender() {\n\t\tconst { projectTitle, src } = this.props\n\t\treturn (\n\t\t\t<StyledRow>\n\t\t\t\t<StyledColumn>\n\t\t\t\t\t<StyledProjectTitle>{projectTitle}</StyledProjectTitle>\n\t\t\t\t\t{this.renderParagraphs()}\n\t\t\t\t</StyledColumn>\n\t\t\t\t<StyledImage src={src}/>\n\t\t\t</StyledRow>\n\t\t)\n\t}\n}\n\nProjectRow.propTypes = {\n\tprojectTitle: PropTypes.string.isRequired,\n\tparagraphs: PropTypes.array.isRequired,\n\tsrc: PropTypes.node.isRequired,\n}\n\nexport default ProjectRow\n","import React, { Component } from 'react';\nimport styled from 'styled-components'\n\n// imgs\nimport evan from './img/headshot.jpeg'\n// svgs\nimport dash from './img/name-underline.svg'\nimport melons from './img/melons.gif'\nimport todov1 from './img/todo-concept-v1.svg'\nimport Typist from 'react-typist';\nimport ProjectRow from './components/ProjectRow'\n\nimport Fade from 'react-reveal/Fade';\n\nconst StyledHeadshot = styled.img`\n  border-radius: 128px;\n  width: 200px;\n  margin-top: 40px;\n`\n\nconst StyledAppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 100vh;\n\n  @media screen and (orientation:landscape) {\n    -ms-transform: rotate(-90deg); /* IE 9 */\n    -webkit-transform: rotate(-90deg); /* Chrome, Safari, Opera */\n    transform: rotate(-90deg);\n    // width: /* screen width */ ;\n    height: 100vh;\n    overflow: scroll;\n  }\n`\n\nconst StyledContainer = styled(StyledAppContainer)`\n  margin-left: 35px;\n  margin-right: 35px;\n  color: #181818,\n`\n\nconst StyledName = styled.span`\n  margin-top: 60px;\n  font-size: 60px;\n  text-align: center;\n\n  @media screen and (max-width: 575px) {\n    margin-left: 0px;\n    margin-right: 0px;\n    font-size: 40px;\n  }\n`\n\nconst StyledLandingTitle = styled.span`\n  margin-top: 60px;\n  margin-left: 35px;\n  margin-right: 35px;\n  font-size: 60px;\n  text-align: center;\n\n  @media screen and (max-width: 575px) {\n    margin-left: 0px;\n    margin-right: 0px;\n    font-size: 25px;\n    text-align: center;\n  }\n`\n\nconst StyledTitle = styled.span`\n  margin-top: 60px;\n  margin-left: 35px;\n  margin-right: 35px;\n  font-size: 60px;\n  text-align: center;\n  // background-color: orange;\n\n  @media screen and (max-width: 575px) {\n    margin-left: 20px;\n    margin-right: 20px;\n    margin-bottom: 20px;\n    font-size: 30px;\n    text-align: left;\n  }\n`\n\nconst StyledMoreInfo = styled.span`\n  font-size: 40px;\n  text-align: center;\n  margin-top: 60px;\n  margin-left: 35px;\n  margin-right: 35px;\n\n  @media screen and (max-width: 575px) {\n    margin-left: 0px;\n    margin-right: 0px;\n    font-size: 25px;\n  }\n`\n\nconst StyledTextBlueUnderline = styled.span`\n  margin: 0px;\n  padding-bottom:5px;\n  background:\n    linear-gradient(\n      to right, \n      #96DFF6 0%,\n      #CCF3FF 100%\n    )\n    left \n    bottom\n    no-repeat; \n  background-size:100% 8px ;/* if linear-gradient, we need to resize it */\n\n  @media screen and (max-width: 575px) {\n    background-size: 100% 6px ;/* if linear-gradient, we need to resize it */\n  }\n`\n\nconst StyledTextPinkUnderline = styled.span`\n  margin: 0px;\n  padding-bottom:5px;\n  background:\n    linear-gradient(\n      to right, \n      #F5B5FC 0%,\n      #FCE5FF 100%\n    )\n    left \n    bottom\n    no-repeat; \n  background-size: 100% 8px ;/* if linear-gradient, we need to resize it */\n\n  @media screen and (max-width: 575px) {\n    background-size: 100% 6px ;/* if linear-gradient, we need to resize it */\n  }\n`\n\n// const StyledTitleRow = styled.span`\n//   display: flex;\n//   flex-direction: row;\n//   align-items: flex-start;\n//   margin-left: 35px;\n//   margin-right: 35px;\n//   background-color: green;\n// `\n\nconst StyledRow = styled.span`\n  display: flex;\n  flex-direction: row;\n  margin-left: 35px;\n  margin-right: 35px;\n  margin-top: 40px;\n  // margin-bottom: 100px;\n  height: 100vh;\n  // background-color: orange;\n  @media screen and (max-width: 575px) {\n    display: block;\n    // background-color: pink;\n    margin-left: 20px;\n    margin-right : 20px;\n  }\n`\n\n// const StyledColumn = styled.span`\n//   display: flex;\n//   flex-direction: column;\n//   // flex: 1;\n// `\n\n// const StyledParagraph = styled.p`\n//   font-size: 30px;\n//   // background-color: red;\n//   margin-right: 35px;\n//   @media screen and (max-width: 575px) {\n//     text-align: left;\n//     font-size: 20px;\n//     margin-right: 0px;\n//   }\n// `\n\n// const StyledImage = styled.img`\n//   height: auto; \n//   width: auto; \n//   max-width: 800px; \n//   max-height: 600px;\n\n//   @media screen and (max-width: 575px) {\n//     max-width: 300px; \n//     max-height: 200px;\n//     display: block;\n//     margin: 0 auto;\n//   }\n// `\n\nconst EmojiContainer = styled.div`\n  font-size: 30px;\n`\n\n\nclass App extends Component {\n  renderContent () {\n    return (\n      <React.Fragment>\n        <Fade right>\n          <StyledTitle>\n            <StyledTextPinkUnderline>Development</StyledTextPinkUnderline> & <StyledTextPinkUnderline>Design</StyledTextPinkUnderline>\n          </StyledTitle>\n        </Fade>\n        <ProjectRow \n          projectTitle=\"In Watermelons We Trust\"\n          paragraphs={['This concept came about when a friend bought the domain watermelons.io with the intention of setting up a web application where users could contribute their own artistic of a watermelon(s).','When drawing a melon in illustrator I got excited and decided to experiment with some 80’s inspired bright colors.']}\n          src={melons}\n        />\n        <ProjectRow \n          projectTitle=\"The Real Course Guide\"\n          paragraphs={[\n            'Every programmer ever has designed a simple todo list at some point - here is my latest concept!',\n            'I’m a firm believer in the less is more style of approach and when I look at my handwritten todo lists I realized that I can boil it down to 3 catergories - Work, Home & Misc.',\n          ]}\n          src={todov1}\n        />\n\n        \n      </React.Fragment>\n    )\n  }\n\n\n  render() {\n    return (\n      <div>\n        <StyledAppContainer>\n          <StyledHeadshot src={evan}/>\n          <Typist cursor={{show: false}}>\n            <StyledContainer>\n              <StyledName style={{ color: '#181818' }}>Evan Dweck</StyledName>\n              <StyledLandingTitle style={{ color: '#181818' }}>\n                I am a <StyledTextBlueUnderline>Software Engineer</StyledTextBlueUnderline> and <StyledTextBlueUnderline>Designer</StyledTextBlueUnderline> 🎨.\n              </StyledLandingTitle>\n              <Typist.Delay ms={1000} />\n              <StyledMoreInfo>I specialize in taking <StyledTextBlueUnderline>concepts and ideas</StyledTextBlueUnderline>💡 to life providing elegant and scalable <StyledTextBlueUnderline>software solutions</StyledTextBlueUnderline>.</StyledMoreInfo>\n            </StyledContainer>\n          </Typist >\n        </StyledAppContainer>\n        {this.renderContent()}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\n"],"sourceRoot":""}